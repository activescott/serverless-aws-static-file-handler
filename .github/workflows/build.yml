name: build

# We want pushes to main, beta, and next to trigger a publish to npm for the corresponding npm dist-tag.
# NOTE: semantic-release detects pull requests and won't deploy on them so we don't have to deal with that complexity here.
# Any pull request should run all tests.
# NOTE: e2e tests use shared resource (AWS) and if they run concurrently they step on one another and cause errors.
#       This can happen for beta & next branches if a PR targeting main also exists for them. There is some logic in e2e_tests job to mitigate this.
on:
  push:
    branches: [main, beta, next]
  # NOTE: `pull_request_target` is insecure per https://securitylab.github.com/research/github-actions-preventing-pwn-requests/.
  # pull_request_target: GIVES read-WRITE repo token & access to SECRETS
  # So be sure to cautiously add any jobs/steps here that write to the repo or run any untrusted code
  pull_request_target:
    branches: [main]

# https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#permissions
# since pull_request_target is runs untrusted code by default, we're being very explicit about permissions and requiring each job to request specific permissions (most of our jobs don't need them except deploys)
permissions: read-all

jobs:
  lint:
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v2
      - name: "Use Node.js (deliberately not using matrix)"
        uses: actions/setup-node@v1
        with:
          node-version: v12.x

      - name: install dependencies
        run: |
          npm i

      - name: lint
        run: |
          npm run lint

  unit_tests:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        node: [10, 12, 14]

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node }}
          cache: "npm"

      - name: install dependencies
        run: |
          npm i

      - name: test
        env:
          CI_NODE_VERSION: ${{ matrix.node }}
        run: |
          npm run test

      - name: publish coverage
        uses: coverallsapp/github-action@master
        continue-on-error: true
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          flag-name: nodejs-${{ matrix.node }}
          parallel: true

  update_code_coverage:
    needs: unit_tests
    runs-on: ubuntu-20.04
    steps:
      - name: Coveralls Finished
        uses: coverallsapp/github-action@master
        continue-on-error: true
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          parallel-finished: true

  e2e_tests:
    needs: unit_tests
    runs-on: ubuntu-20.04
    environment: aws
    env:
      # e2e tests use a shared resource in AWS. Since we trigger on both a push to beta/next and a PR with destination branch of main, a PR against beta/next will cause them to run concurrently and causes errors. To prevent this contention we use a serverless stage.
      # For more information on serverless stages:
      # - https://www.serverless.com/framework/docs/providers/aws/cli-reference/deploy/
      # - https://www.serverless.com/framework/docs/providers/aws/guide/deploying#tips
      # github.run_id: A unique number for each run within a repository. This number does not change if you re-run the workflow run. https://docs.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#github-context
      # github format: https://docs.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#format
      SERVERLESS_STAGE: ${{ github.event_name == 'pull_request' && format('pr{0}', github.run_id) || format('push{0}', github.run_id) }}
    steps:
      - uses: actions/checkout@v2

      - name: Use Node.js v12.x
        uses: actions/setup-node@v1
        with:
          node-version: v12.x

      - name: build plugin locally
        run: |
          cd "$GITHUB_WORKSPACE"
          npm i
          npm pack

      - name: run local end-to-end test in serverless-offline
        run: |
          "$GITHUB_WORKSPACE/test-files/scripts/test-local-e2e.sh"

      - name: prepare to run remote end-to-end test
        env:
          AWS_KEY_ID: ${{ secrets.AWS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          # When dependabot or other forks trigger a workflow these secrets won't be passed (at least not without the right setup). This makes it easier to spot it in output.
          if [[ -z "$AWS_KEY_ID" ]]; then
            echo "AWS_KEY_ID not specified (note that Secrets are not passed to workflows that are triggered by a pull request from a fork: https://docs.github.com/en/actions/reference/encrypted-secrets#using-encrypted-secrets-in-a-workflow)"
            exit 1
          fi
          if [[ -z "$AWS_SECRET_ACCESS_KEY" ]]; then
            echo "AWS_SECRET_ACCESS_KEY not specified (note that Secrets are not passed to workflows that are triggered by a pull request from a fork: https://docs.github.com/en/actions/reference/encrypted-secrets#using-encrypted-secrets-in-a-workflow)"
            exit 1
          fi

          cd "$GITHUB_WORKSPACE/examples/basic"
          npm i
          # now update to use the local plugin built above
          npm install --save file://../../serverless-aws-static-file-handler-0.0.0.tgz
          ./node_modules/.bin/serverless config credentials --provider aws --key $AWS_KEY_ID --secret $AWS_SECRET_ACCESS_KEY --profile serverless --overwrite

      - name: run remote end-to-end test
        run: |
          cd "$GITHUB_WORKSPACE/examples/basic"
          echo "Deploying serverless stage $SERVERLESS_STAGE"
          ./node_modules/.bin/serverless deploy --aws-profile serverless --stage $SERVERLESS_STAGE

          # get the APIG endpoint URL:
          APIG_URL=$(./node_modules/.bin/serverless info --aws-profile serverless --stage $SERVERLESS_STAGE | sed -nr "s#^.*(https://.+/$SERVERLESS_STAGE)\$#\1#p")
          echo "Discovered APIG_URL: $APIG_URL"

          # CURL to some known good endpoints expecting 200:
          TEST_HTTP_EXEC=$GITHUB_WORKSPACE/test-files/scripts/test-http.sh
          ROOT_URL=$APIG_URL

          # 200; these all should succeed
          $TEST_HTTP_EXEC $ROOT_URL/binary/png.png
          $TEST_HTTP_EXEC $ROOT_URL/binary/jpg.jpg
          $TEST_HTTP_EXEC $ROOT_URL/binary/glyphicons-halflings-regular.woff2
          $TEST_HTTP_EXEC $ROOT_URL/binary/subdir/png.png

          # 403
          $TEST_HTTP_EXEC "$ROOT_URL/ff404.png" 403
          $TEST_HTTP_EXEC "$ROOT_URL/jpeg404.jpg" 403
          $TEST_HTTP_EXEC "$ROOT_URL/subdir404/ff.png" 403
          $TEST_HTTP_EXEC "$ROOT_URL/subdir/ff404.png" 403

          # 404
          $TEST_HTTP_EXEC "$ROOT_URL/binary/404-glyphicons-halflings-regular.woff2" 404
          $TEST_HTTP_EXEC "$ROOT_URL/binary/subdir/404-png.png" 404

      - name: cleanup remote end-to-end test (destroy serverless stack)
        # Run this step even if the prior one failed (to clean up)
        if: ${{ always() }}
        run: |
          cd "$GITHUB_WORKSPACE/examples/basic"
          echo "Destroying serverless stage $SERVERLESS_STAGE"
          ./node_modules/.bin/serverless remove --aws-profile serverless --stage $SERVERLESS_STAGE

  publish_package:
    # semantic release skips runs for PRs anyway (as it should)
    if: ${{ github.event_name == 'push' }}
    # NOTE: permissions here since pull_request_target trigger has a token with WRITE permissions
    # semantic-release's needed permissions are documented at https://github.com/semantic-release/github#github-authentication
    permissions:
      contents: write # to be able to publish a Github release
      issues: write # to be able to comment on released issues
      pull-requests: write # to be able to comment on released pull requests

    needs: [e2e_tests, unit_tests]
    runs-on: ubuntu-20.04
    environment: npm
    steps:
      - uses: actions/checkout@v2

      - name: Use Node.js v12.x
        uses: actions/setup-node@v1
        with:
          node-version: v12.x

      #- name: debug publish_package
      #  uses: actions/bin/debug@master

      - name: publish to npm
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          npm install
          npx semantic-release@17
